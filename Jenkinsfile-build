pipeline {

	agent {
		label 'docker-runner-project-ntep'
	}

	environment {
		// IMAGE_REPO : Image repository domain and any required prefix.
		// CRED_GITHUB_PAT_READ : Credential ID which contains a GitHub PAT to increase
		//     rate limits and access private repos.
		TUMBLR_DIR='tumblR'
		PROJECT_DIR='project'
	}

	libraries {
		lib('cpal')
	}

	stages {

		stage('Setup Environment') {
			steps {
				loadConfigsAsEnv "container-images tumblr-project ${JOB_BASE_NAME}"
			}
		}

		stage('Checkout') {
			steps {
				// Checkout the main project (this repository)
				checkout scm

				// Checkout tumblR repository
				checkout([
					$class: 'GitSCM',
					branches: [[name: 'main']],
					userRemoteConfigs: [[
						url: "${env.TUMBLR_REPO}",
						credentialsId: "${env.TUMBLR_REPO_CRED_ID}"
					]],
					extensions: [
						[$class: 'RelativeTargetDirectory', relativeTargetDir: "${TUMBLR_DIR}"]
					]
				])

				script {
					// Consumed by build-images.sh
					env.TUMBLR_PATH = "${env.WORKSPACE}/${TUMBLR_DIR}"
				}

			}
		}

		stage('Build') {
			environment {
				// Consumed by build-images.sh
				GITHUB_PAT_CPAL_READ = credentials("${env.CRED_GITHUB_PAT_READ}")
			}
			steps {
				sh './build-images.sh --cache-registry'
			}
		}

		stage('Test') {
			steps {
				sh './test-images.sh'
			}
		}

		stage('Publish') {
			steps {
				// Push all tags for images identified by the 'lastbuilt' tag.
				sh '''
				for image_tag in $(./ls-images.sh path lastbuilt | tr '\n' ' '); do
					docker push --all-tags "${image_tag}"
				done
				'''
			}
		}

		stage('Update Jenkinsfile') {
			steps {
				script {
					// Get the git commit hash for tagging
					def gitCommit = sh(
						script: 'git rev-parse --short HEAD',
						returnStdout: true
					).trim()
					
					// Update the APP_VERSION in the main Jenkinsfile
					sh "sed -i \"s/APP_VERSION = '.*'/APP_VERSION = '${gitCommit}'/\" Jenkinsfile"
					
					// Commit and push the updated Jenkinsfile
					sh '''
						git config user.name "Jenkins"
						git config user.email "jenkins@cpal.org"
						git add Jenkinsfile
						git commit -m "Auto-update APP_VERSION to ${gitCommit} after container build" || true
						git push origin HEAD:${BRANCH_NAME} || true
					'''
				}
			}
		}

	}

	post {
		always {

			echo "# Removing images from local docker reference"
			sh '''
			for image_tag in $(./ls-images.sh id lastbuilt | tr '\n' ' '); do
				docker image rm -f "${image_tag}"
			done
			'''

			cleanWs()
		}
	}
}
