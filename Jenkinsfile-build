pipeline {

	agent {
		label 'amd64 && linux && docker'
	}

	environment {
		// IMAGE_REPO : Image repository domain and any required prefix.
		// GITHUB_PAT_CPAL_READ : Token for R[renv] for GitHub rate limit removal and private repos.
		TUMBLR_DIR='tumblr'
	}

	stages {

		stage('Setup Environment') {
			steps {
				script {
					configFileProvider([configFile(fileId: "${JOB_BASE_NAME}", targetLocation: '.jenkins-env')]) {
						def envContent = readFile('.jenkins-env')
						envContent.split('\n').each { line ->
							def trimmedLine = line.trim()
							if (trimmedLine && trimmedLine.contains('=')) {
								def parts = trimmedLine.split('=', 2)
								if (parts.size() == 2) {
									def key = parts[0].trim()
									def value = parts[1].trim()
									env."${key}" = value
								}
							}
						}
					}
				}
			}
		}

		stage('Checkout') {
			steps {

				checkout([
					$class: 'GitSCM',
					branches: [[name: 'jenkins-pipeline']],
					userRemoteConfigs: [[
						url: "${env.TUMBLR_REPO}",
						credentialsId: "${env.TUMBLR_REPO_CRED_ID}"
					]],
					extensions: [
						[$class: 'RelativeTargetDirectory', relativeTargetDir: "${TUMBLR_DIR}"]
					]
				])

				script {
					// Consumed by build-images.sh
					env.TUMBLR_PATH = "${env.WORKSPACE}/${TUMBLR_DIR}"
				}

			}
		}

		stage('Build') {
			environment {
				// Consumed by build-images.sh
				GITHUB_PAT_CPAL_READ = credentials("${env.CRED_GITHUB_PAT_READ}")
			}
			steps {
				dir ('project') {
					sh './build-images.sh --cache-registry'
				}
			}
		}

		stage('Test') {
			steps {
				dir ('project') {
					sh './test-images.sh'
				}
			}
		}

		stage('Publish') {
			steps {
				dir ('project') {
					// Push all tags for images identified by the 'lastbuilt' tag.
					sh '''
					for image_tag in $(./ls-images.sh path lastbuilt | tr '\n' ' '); do
						docker push --all-tags "${image_tag}"
					done
					'''
				}
			}
		}

	}

	post {
		always {

			echo "# Removing images from local docker reference"
			dir ('project') {
				sh '''
				for image_tag in $(./ls-images.sh id lastbuilt | tr '\n' ' '); do
					docker image rm -f "${image_tag}"
				done
				'''
			}

			cleanWs()
		}
	}
}
